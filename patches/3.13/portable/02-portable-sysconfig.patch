diff --git a/Lib/sysconfig/__init__.py b/Lib/sysconfig/__init__.py
index 80aef344711..628c8b05270 100644
--- a/Lib/sysconfig/__init__.py
+++ b/Lib/sysconfig/__init__.py
@@ -686,3 +686,52 @@ def expand_makefile_vars(s, vars):
         else:
             break
     return s
+
+
+# Patch the included pkgconfig files to use the prefix computed during
+# runtime. This is a hack for mesonbuild, which looks for Python using
+# pkgconfig. Since a portable Python installation can be moved around,
+# we have to fix the pkgconfig files to use the correct prefix.
+def portable_python_fixup_pkgconfig():
+    vars = get_config_vars()
+
+    pkgcfgdir = vars.get('LIBPC')
+    prefix = vars.get('prefix')
+    if pkgcfgdir and os.path.isdir(pkgcfgdir):
+        import tempfile
+        import hashlib
+        tempdir_root = tempfile.gettempdir()
+        suffix = hashlib.md5(sys.version.encode('utf-8')).hexdigest()
+        portable_python_tempdir = os.path.join(tempdir_root, f'.portable-python-{suffix}')
+        portable_python_pkgconfig = os.path.join(portable_python_tempdir, 'lib/pkgconfig')
+
+        if pkgcfgdir == portable_python_pkgconfig:
+            return
+
+        os.makedirs(portable_python_pkgconfig, exist_ok=True)
+
+        for root, dirs, files in os.walk(pkgcfgdir):
+            for file in files:
+                if file.endswith('.pc'):
+                    with open(os.path.join(root, file), 'r', encoding='utf8') as f:
+                        data = f.read()
+                    for line in data.split('\n'):
+                        if line.startswith('prefix=') and line != f'prefix={prefix}':
+                            data = data.replace(line, f'prefix={prefix}')
+                            break
+                    if not os.path.exists(os.path.join(portable_python_pkgconfig, file)):
+                        with open(os.path.join(portable_python_pkgconfig, file), 'w+', encoding='utf8') as f:
+                            f.write(data)
+                    else:
+                        with open(os.path.join(portable_python_pkgconfig, file), 'r', encoding='utf8') as f:
+                            tempdata = f.read()
+                        if tempdata != data:
+                            with open(os.path.join(portable_python_pkgconfig, file), 'w', encoding='utf8') as f:
+                                f.write(data)
+
+        _CONFIG_VARS['LIBPC'] = portable_python_pkgconfig
+
+try:
+    portable_python_fixup_pkgconfig()
+except:
+    pass
\ No newline at end of file
diff --git a/Lib/sysconfig/__main__.py b/Lib/sysconfig/__main__.py
index d7257b9d2d0..9ddfff692bc 100644
--- a/Lib/sysconfig/__main__.py
+++ b/Lib/sysconfig/__main__.py
@@ -215,6 +215,19 @@ def _generate_posix_vars():
         f.write('build_time_vars = ')
         _print_config_dict(vars, stream=f)
 
+    # fixup sysconfig to use dynamic paths for portable python
+    with open(destfile, 'r', encoding='utf8') as f:
+        varsfile = f.read()
+    if '# patched for portable python' not in varsfile:
+        varsfile = varsfile.replace(" '"+vars['prefix'], " f'{root}")
+        varsfile = varsfile.replace(" '-I"+vars['prefix'], " f'-I{root}")
+        varsfile = varsfile.replace(" \"'"+vars['prefix'], " f\"'{root}")
+        with open(destfile, 'w', encoding='utf8') as f:
+            f.write('# patched for portable python\n')
+            f.write('import sys\nimport os\n')
+            f.write('root = os.path.dirname(os.path.dirname(sys.executable))\n')
+            f.write(varsfile)
+
     # Create file used for sys.path fixup -- see Modules/getpath.c
     with open('pybuilddir.txt', 'w', encoding='utf8') as f:
         f.write(pybuilddir)
